% Wang Wu (Raymond), WCW3 , H00262859
% F28PL Coursework PR1

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Question 1 
%
% The complex numbers are explained here (and elsewhere):
%  http://www.mathsisfun.com/algebra/complex-number-multiply.html
% Represent a complex integer as a two-element list of integers, so [4,5] represents 4+5i.
% Write Prolog predicates
%  cadd/3
%  cmult/3
% representing complex integer addition and multiplication. Thus for instance,
%  cadd([X1,X2],[Y1,Y2],[Z1,Z2])
% succeeds if and only if Z1=X1+Y1 and Z2=X2+Y2.
% Note that complex number multiplication is not just like complex number addition. 
% Check the link and read the definition.
%
% cadd/3
cadd([X1,X2],[Y1,Y2],[Z1,Z2]):-
	Z1 is X1 + Y1, Z2 is X2 + Y2.
% cmult/3
cmult([X1,X2],[Y1,Y2],[Z1,Z2]):-
	Z1 is (X1 * Y1) - (X2 * Y2) , Z2 is (X1 * Y2) + (X2 * Y1).
/* Testing
cadd([1,2],[3,4],[4,6]). -> true
cadd([1,1],[1,1],X). -> X = [2,2]
cmult([3,2],[1,7],[-11,23]). -> true
cmult([1,1],[1,1],X). -> X = [0,2]
*/
% END ANSWER TO Question 1
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Question 2
%
% An integer sequence is a list of integers. Write a Prolog predicate
%  seqadd/3
% such that seqadd(X,Y,Z) succeeds when X and Y are lists of integers of the same length and
% Z is their sequence sum. 

% seqadd(X,Y,Z)
seqadd([],[],[]).
seqadd([H1|X],[H2|Y],[H3|Z]):-
	H3 is H1 + H2, seqadd(X,Y,Z).
	

/* Include testing in comments, so your marker can load this file as a database then cut-and-paste any testing into the command line.
seqadd([1,2,3],[4,5,6],X). -> X = [5,7,9]
seqadd([1,2,3],[4,5,6,7],X). -> false
seqadd([1,2,3,4],[4,5,6,7],[5,7,9,11]). -> true
*/

% END ANSWER TO Question 2
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Question 4
%
% 4a. Explain what backtracking has to do with Prolog. You might find this webpage helpful:
% https://www.doc.gold.ac.uk/~mas02gw/prolog_tutorial/prologpages/search.html
%
% 4b. Explain to what extent Prolog can be viewed as a logic programming language, and to what
% extent it cannot be so viewed. Include example code fragments as appropriate.

/* Write answer in comments here.
4a. 
The unique feature of Prolog is that it automatically chooses the facts and rules needed to solve a query. 
It means that Prolog’s execution mechanism is based on resolution. 
To achieve that, Prolog has two key concepts, unification and backtracking. 
Given a goal to evaluate, Prolog works through the clauses in the database trying to match the goal with each clause in turn, 
working from top to bottom until a match is found (trying to match facts and rules in their order of definition).
If no match is found, the goal fails. The way it matches patterns is called unification. 
The way it searches for patterns is called backtracking. When it reach a point where a goal
can’t be matched, or the body of a rule can’t be matched, it backtracks to the last spot 
where a choice of matching a particular fact or rule was made. 
It then tries to match a different fact or rule. 
If this fails, it goes back to the next previous place where a choice was made and tries a different match there. 
It tries alternatives until it is able to solve all the goals in the query or until all possible choices have been tried and found to fail. 
If this happens, it answer “no” (the query can’t be solved)

4b.
A logical program is a set of logical statements about an abstract model. 
The subset of statements that describe a concrete relation is called a predicate. 
A statement can be a fact or a rule. 
Prolog has all above characteristics. Thats why it's viewed as a logic programming language.
Example:
	human(john). % fact
	human(daisy). % fact
	has_poem(john, spring). % fact
	poet(X):- human(X), has_poem(X,_). % rule
	
	And the question (query):
	poet(john). -> true
	
But...
Prolog has a feature that makes it go beyond of a logic programming language.
It's "cut (!)". The cut operator is used to control the process of searching for solutions. 
The role of the cut operator is essential in the definition of recursive rules as it helps avoid infinite recursion.
Cut can improve efficiency of Prolog programs, however, it also changes the clear operational behaviour of programs.
With this feature, Prolog's viewed as a procedure programming language.
Example:
	f(X,0):- X < 3, !.
	f(X,1):- X < 6, !.
	f(X,2).
	The cut will make the query f(1,Y) have only one value Y = 0 although the second rule satisfies the goal.
*/

% END ANSWER TO Question 4
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Question 5
%
% Write a database for a predicate cycleoflife/1 such that the query
%  cycleoflife(X)
% returns the instantiations
%  X = eat
%  X = sleep
%  X = code
%  X = eat
%  X = sleep
%  X = code
%  ...
% in an endless cycle.
% (This question has a beautiful and simple answer. If you find yourself writing lines and lines of
% complex code, there’s probably something amiss.)
cycleoflife(eat).
cycleoflife(sleep).
cycleoflife(code).
cycleoflife(X):- cycleoflife(X).

/* Include testing in comments, so your marker can load this file as a database then cut-and-paste any testing into the command line.
cycleoflife(X).
*/

% END ANSWER TO Question 5
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%


